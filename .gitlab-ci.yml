# we excplicitly use tag with runner hostname to ensure stages on the same runner.
# This brakes parallelism but makes things much clearer and simplier.

stages:
- make_deb_v1

make_deb_v1:
  tags:
    - dev1.sysadm.ws
  stage: make_deb_v1
  artifacts:
    name: v1
    paths:
      - builds/v1
  only:
    refs:
      - master
  script: |
    # Create dir for every util
    mkdir -p builds/v1/sysadmws-utils-v1/opt/sysadmws/bulk_log \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/mysql_queries_log \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/mysql_replica_checker \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/notify_devilry \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/disk_alert \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/put_check_files \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/logrotate_db_backup \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/mikrotik_backup \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/rsnapshot_backup \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/backup_check \
             builds/v1/sysadmws-utils-v1/opt/sysadmws/misc
    # LICENSE README.md
    cp LICENSE \
       README.md \
       builds/v1/sysadmws-utils-v1/opt/sysadmws
    # bulk_log
    cp bulk_log/bulk_log.sh \
       bulk_log/bulk_log.cron \
       bulk_log/bulk_log.logrotate \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/bulk_log
    # mysql_queries_log
    cp mysql_queries_log/mysql_queries_log.sh \
       mysql_queries_log/mysql_queries_log.cron \
       mysql_queries_log/mysql_queries_log.logrotate \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/mysql_queries_log
    # mysql_replica_checker
    cp mysql_replica_checker/mysql_replica_checker.sh \
       mysql_replica_checker/mysql_replica_checker.cron \
       mysql_replica_checker/mysql_replica_checker.conf.sample \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/mysql_replica_checker
    # notify_devilry
    cp notify_devilry/notify_devilry.py \
       notify_devilry/notify_devilry_test.sh \
       notify_devilry/notify_devilry.yaml.jinja.example \
       notify_devilry/notify_devilry.yaml.jinja.shortex \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/notify_devilry
    # disk_alert
    cp disk_alert/disk_alert.sh \
       disk_alert/disk_alert.cron \
       disk_alert/disk_alert.conf \
       disk_alert/lr.awk \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/disk_alert
    # put_check_files
    cp put_check_files/put_check_files.sh \
       put_check_files/put_check_files.cron \
       put_check_files/put_check_files.conf.sample \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/put_check_files
    # logrotate_db_backup
    cp logrotate_db_backup/logrotate_db_backup.awk \
       logrotate_db_backup/logrotate_db_backup.conf.sample \
       logrotate_db_backup/logrotate_db_backup.sh \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/logrotate_db_backup
    # mikrotik_backup
    cp mikrotik_backup/mikrotik_backup.sh \
       mikrotik_backup/mikrotik_backup.conf.sample \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/mikrotik_backup
    # rsnapshot_backup
    cp rsnapshot_backup/rsnapshot_backup.awk \
       rsnapshot_backup/rsnapshot_backup.sh \
       rsnapshot_backup/rsnapshot_conf_template_FS_RSYNC_SSH_PATH.conf \
       rsnapshot_backup/rsnapshot_conf_template_FS_RSYNC_SSH_UBUNTU.conf \
       rsnapshot_backup/rsnapshot_conf_template_FS_RSYNC_SSH_DEBIAN.conf \
       rsnapshot_backup/rsnapshot_conf_template_FS_RSYNC_SSH_CENTOS.conf \
       rsnapshot_backup/rsnapshot_conf_template_ROTATE.conf \
       rsnapshot_backup/rsnapshot_conf_template_FS_RSYNC_NATIVE.conf \
       rsnapshot_backup/rsnapshot_conf_template_LOCAL_PREEXEC.conf \
       rsnapshot_backup/rsnapshot_backup_daily.cron \
       rsnapshot_backup/rsnapshot_backup_hourly.cron \
       rsnapshot_backup/rsnapshot_backup_postgresql_query1.sql \
       rsnapshot_backup/rsnapshot_backup.logrotate \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/rsnapshot_backup
    # backup_check
    cp backup_check/backup_check.sh \
       backup_check/by_check_file.awk \
       backup_check/by_check_file.sh \
       backup_check/by_fresh_files.awk \
       backup_check/by_fresh_files.sh \
       backup_check/by_mysql.awk \
       backup_check/by_mysql.sh \
       backup_check/by_postgresql.awk \
       backup_check/by_postgresql.sh \
       backup_check/compare_rsnapshot_backup_with_backup_check.awk \
       backup_check/compare_rsnapshot_backup_with_backup_check.sh \
       backup_check/check_rsnapshot_backup_no_compress_files.sh \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/backup_check
    # misc
    cp misc/mysql_dump_all_dbs_to_files.sh \
       misc/postgresql_dump_all_dbs_to_files.sh \
       misc/mysql_table_extractor.sh \
       misc/mysql_create_new_database.sh \
       builds/v1/sysadmws-utils-v1/opt/sysadmws/misc
    # Make md5sums
    ( cd builds/v1/sysadmws-utils-v1 && find . -type f ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -printf '%P ' | xargs md5sum > DEBIAN/md5sums )
		# Get size
		export SIZE=$(du -s builds/v1/sysadmws-utils-v1)
    # Get current and new version
    mkdir -p builds/v1/DEBIAN
    CUR_VERSION=$(curl -s https://repo.sysadm.ws/sysadmws-apt/dists/any/main/binary-amd64/Packages | grep -Pzo 'Package: sysadmws-utils-v1\n.*\n.*\n.*\n.*\n' | grep --text 'Version' | sed -e 's/Version: 1\.//')
    export NEW_VERSION=$((CUR_VERSION+1))
		# Prepare control
    cat deb/control | sed -e "s#__VERSION__#$NEW_VERSION#" -e "s#__SIZE__#$SIZE#" > builds/v1/DEBIAN/control
    # Make deb
    ( cd builds/v1 && fakeroot dpkg-deb -b sysadmws-utils-v1 )
